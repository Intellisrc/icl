plugins {
    id 'groovy'
    id 'java-library'
    id 'maven-publish'
}

def currentVersion = "2.8.0"

allprojects {
    group = groupName
    version = currentVersion
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'groovy'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    dependencies {
        //def groovyVer = "2.5.14"
        def groovyVer = "3.0.7"
        def groovyExt = "3.0.8.7"
        def spock = "2.0-groovy-3.0"
        def junit = "4.13.2"
        def byteBuddy = "1.11.6"

        boolean isDev = currentVersion.contains("SNAPSHOT")
        def deps = ["org.codehaus.groovy:groovy-all:${groovyVer}"]
        if(isDev) {
            deps.each { api it }
        } else {
            deps.each { compileOnly it } //Link it so we can choose version
        }
        // Always include groovy-extend and expose it to consumers:
        api "com.intellisrc:groovy-extend:${groovyExt}"
        testImplementation "org.spockframework:spock-core:${spock}"
        testImplementation "junit:junit:${junit}"
        //testImplementation "net.bytebuddy:byte-buddy:${byteBuddy}"
    }
    // Used to publish to MavenLocal
    publishing {
       publications {
           mavenJava(MavenPublication) {
               artifactId project.name
               from components.java
           }
       }
    }

    tasks.named('test') {
        // Use JUnit Platform for unit tests.
        useJUnitPlatform()
    }

/*    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { deployment ->
                    signing.signPom(deployment)
                    configurations.clientArchives.artifacts.each { ca ->
                        println ca.file.absolutePath
                        deployment.addArtifact(ca)
                        def ascfile = file(ca.file.path + '.asc')
                        println ascfile.absolutePath
                        def ascartf = project.artifacts.add('ascSignatures', ascfile) {
                            classifier = ca.classifier
                            extension = ca.extension + '.asc'
                            type = ca.type + '.asc'
                        }
                        deployment.addArtifact(ascartf)
                    }
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    groupId groupName
                    artifactId project.name
                    version version
                    packaging 'jar'
                    name projectName
                    description projectDescription
                    url projectURL
                    inceptionYear projectSince

                    scm {
                        url projectURL
                        connection "scm:git:${projectURL}.git"
                        developerConnection "scm:git:${projectDevURL}"
                    }

                    licenses {
                        license {
                            name 'GNU General Public License v3.0'
                            url 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'lepe'
                            name 'Alberto Lepe'
                            email 'lepe@intellisrc.com'
                        }
                    }
                }
            }
        }
    }

    task signJars {
        dependsOn( jar, sourceJar, javadocJar )
        signing {
            doLast {
                [jar, javadocJar, sourceJar].each {
                    Task task ->
                        File file = task.archiveFile.get().asFile
                        if (file.exists()) {
                            sign file
                        } else {
                            println "Jar : " + file.name + " doesn't exists"
                        }
                }
            }
        }
    }

    uploadArchives.dependsOn(signJars)
 */
}

java {
    withSourcesJar()
    withJavadocJar()
}
