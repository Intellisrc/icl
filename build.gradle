plugins {
    id 'idea'
    id 'groovy'
    id 'maven'
    id 'maven-publish'
}

def currentVersion = "2.7.17"

allprojects {
    group = groupName
    version = currentVersion
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'groovy'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    configurations {
        clientArchives
        ascSignatures
    }

    task sourceJar(type: Jar) {
        archiveClassifier = "sources"
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        archiveClassifier = "javadoc"
        dependsOn("groovydoc")
        from tasks.groovydoc.destinationDir
    }

    jar.dependsOn( sourceJar, javadocJar )
    test.dependsOn( jar )

    artifacts {
        clientArchives jar
        clientArchives sourceJar
        clientArchives javadocJar
    }

    dependencies {
        compile 'com.intellisrc:groovy-extend:2.5.6.6'
        testCompile 'org.spockframework:spock-unitils:1.3-groovy-2.5'
        testCompile 'net.bytebuddy:byte-buddy:1.10.2'
    }
    // Used to publish to MavenLocal
    publishing {
       publications {
           mavenJava(MavenPublication) {
               artifactId project.name
               from components.java
           }
       }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { deployment ->
                    signing.signPom(deployment)
                    configurations.clientArchives.artifacts.each { ca ->
                        println ca.file.absolutePath
                        deployment.addArtifact(ca)
                        def ascfile = file(ca.file.path + '.asc')
                        println ascfile.absolutePath
                        def ascartf = project.artifacts.add('ascSignatures', ascfile) {
                            classifier = ca.classifier
                            extension = ca.extension + '.asc'
                            type = ca.type + '.asc'
                        }
                        deployment.addArtifact(ascartf)
                    }
                }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    groupId groupName
                    artifactId project.name
                    version version
                    packaging 'jar'
                    name projectName
                    description projectDescription
                    url projectURL
                    inceptionYear projectSince

                    scm {
                        url projectURL
                        connection "scm:git:${projectURL}.git"
                        developerConnection "scm:git:${projectDevURL}"
                    }

                    licenses {
                        license {
                            name 'GNU General Public License v3.0'
                            url 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'lepe'
                            name 'Alberto Lepe'
                            email 'lepe@intellisrc.com'
                        }
                    }
                }
            }
        }
    }

    task signJars {
        dependsOn( jar, sourceJar, javadocJar )
        signing {
            doLast {
                [jar, javadocJar, sourceJar].each {
                    Task task ->
                        File file = task.archiveFile.get().asFile
                        if (file.exists()) {
                            sign file
                        } else {
                            println "Jar : " + file.name + " doesn't exists"
                        }
                }
            }
        }
    }

    uploadArchives.dependsOn(signJars)
}
